// gateway/db/db.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const DATA_FILE = path.join(__dirname, 'memory.store.json');

function isoSeconds(d=new Date()) {
  const t = Math.floor(d.getTime()/1000)*1000;
  return new Date(t).toISOString().replace(/\.\d{3}Z$/, 'Z');
}

let store = { users: {} };
try {
  if (fs.existsSync(DATA_FILE)) store = JSON.parse(fs.readFileSync(DATA_FILE,'utf8'));
} catch { store = { users: {} }; }

function save() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(store, null, 2));
}

function scopeRef(userId, workspaceId, scope) {
  if (!store.users[userId]) store.users[userId] = {};
  if (!store.users[userId][workspaceId]) store.users[userId][workspaceId] = { short:{}, long:{} };
  const bucket = store.users[userId][workspaceId][scope];
  return bucket;
}

function listMemory(userId, workspaceId, scope) {
  const b = scopeRef(userId, workspaceId, scope);
  return Object.values(b).sort((a,b)=> (b.updatedAt||b.createdAt||'').localeCompare(a.updatedAt||a.createdAt||''));
}

function getMemory(userId, workspaceId, scope, memid) {
  const b = scopeRef(userId, workspaceId, scope);
  return b[memid] || null;
}

function upsertMemory(userId, workspaceId, scope, memid, nextContent, mode, separator) {
  const b = scopeRef(userId, workspaceId, scope);
  const now = isoSeconds();
  const cur = b[memid] || { memid, content: '', createdAt: now, updatedAt: now };
  let content = cur.content || '';
  if (mode === 'clear') content = '';
  else if (mode === 'append') content = content ? content + (separator ?? '\n') + nextContent : nextContent;
  else content = nextContent;

  const updated = { memid, content, createdAt: cur.createdAt || now, updatedAt: now };
  b[memid] = updated;
  save();
  return updated;
}

function deleteMemory(userId, workspaceId, scope, memid) {
  const b = scopeRef(userId, workspaceId, scope);
  if (!b[memid]) return false;
  delete b[memid];
  save();
  return true;
}

// Legacy single-slot helpers (map to memid="default")
function getShortTerm(userId, workspaceId) {
  const it = getMemory(userId, workspaceId, 'short', 'default');
  return it ? it.content : '';
}
function setShortTerm(userId, workspaceId, content) {
  return upsertMemory(userId, workspaceId, 'short', 'default', content, 'set');
}
function getLongTerm(userId, workspaceId) {
  const it = getMemory(userId, workspaceId, 'long', 'default');
  return it ? it.content : '';
}
function setLongTerm(userId, workspaceId, content) {
  return upsertMemory(userId, workspaceId, 'long', 'default', content, 'set');
}

export default {
  listMemory, getMemory, upsertMemory, deleteMemory,
  getShortTerm, setShortTerm, getLongTerm, setLongTerm
};
